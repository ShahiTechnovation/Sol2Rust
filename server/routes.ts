import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { convertSolidityToRust, compileRustToEVM } from "./conversion";

export async function registerRoutes(app: Express): Promise<Server> {
  // API Endpoints
  
  // Convert Solidity to Rust
  app.post("/api/convert", async (req, res) => {
    try {
      const { solidityCode } = req.body;
      
      if (!solidityCode) {
        return res.status(400).json({
          success: false,
          error: "Solidity code is required"
        });
      }
      
      const result = await convertSolidityToRust(solidityCode);
      res.json(result);
    } catch (error) {
      console.error("Conversion error:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Internal server error"
      });
    }
  });
  
  // Compile Rust to EVM bytecode
  app.post("/api/compile", async (req, res) => {
    try {
      const { rustCode, contractName } = req.body;
      
      if (!rustCode) {
        return res.status(400).json({
          success: false,
          error: "Rust code is required"
        });
      }
      
      if (!contractName) {
        return res.status(400).json({
          success: false,
          error: "Contract name is required"
        });
      }
      
      const result = await compileRustToEVM(rustCode, contractName);
      
      // Log the compilation result for debugging
      console.log("Compilation result:", {
        success: result.success,
        bytecodeLength: result.bytecode ? result.bytecode.length : 0,
        bytecodeStart: result.bytecode ? result.bytecode.substring(0, 20) + '...' : '',
        abiItems: result.abi ? result.abi.length : 0
      });
      
      // Ensure bytecode is valid
      if (result.success && (!result.bytecode || !result.bytecode.startsWith('0x') || !/^0x[0-9a-f]+$/i.test(result.bytecode))) {
        console.error("Invalid bytecode format:", result.bytecode);
        return res.status(400).json({
          success: false,
          error: "Generated bytecode is not in valid format"
        });
      }
      
      res.json(result);
    } catch (error) {
      console.error("Compilation error:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Internal server error"
      });
    }
  });

  const httpServer = createServer(app);

  return httpServer;
}
